// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file event/v1/event.proto (package event.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message event.v1.StartEventRequest
 */
export class StartEventRequest extends Message<StartEventRequest> {
  /**
   * @generated from field: string future_timestamp = 1;
   */
  futureTimestamp = "";

  constructor(data?: PartialMessage<StartEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "event.v1.StartEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "future_timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartEventRequest {
    return new StartEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartEventRequest {
    return new StartEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartEventRequest {
    return new StartEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartEventRequest | PlainMessage<StartEventRequest> | undefined, b: StartEventRequest | PlainMessage<StartEventRequest> | undefined): boolean {
    return proto3.util.equals(StartEventRequest, a, b);
  }
}

/**
 * @generated from message event.v1.StartEventResponse
 */
export class StartEventResponse extends Message<StartEventResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int64 duration = 2;
   */
  duration = protoInt64.zero;

  constructor(data?: PartialMessage<StartEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "event.v1.StartEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "duration", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartEventResponse {
    return new StartEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartEventResponse {
    return new StartEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartEventResponse {
    return new StartEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartEventResponse | PlainMessage<StartEventResponse> | undefined, b: StartEventResponse | PlainMessage<StartEventResponse> | undefined): boolean {
    return proto3.util.equals(StartEventResponse, a, b);
  }
}

/**
 * @generated from message event.v1.StopEventRequest
 */
export class StopEventRequest extends Message<StopEventRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<StopEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "event.v1.StopEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopEventRequest {
    return new StopEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopEventRequest {
    return new StopEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopEventRequest {
    return new StopEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopEventRequest | PlainMessage<StopEventRequest> | undefined, b: StopEventRequest | PlainMessage<StopEventRequest> | undefined): boolean {
    return proto3.util.equals(StopEventRequest, a, b);
  }
}

/**
 * @generated from message event.v1.StopEventResponse
 */
export class StopEventResponse extends Message<StopEventResponse> {
  constructor(data?: PartialMessage<StopEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "event.v1.StopEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopEventResponse {
    return new StopEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopEventResponse {
    return new StopEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopEventResponse {
    return new StopEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopEventResponse | PlainMessage<StopEventResponse> | undefined, b: StopEventResponse | PlainMessage<StopEventResponse> | undefined): boolean {
    return proto3.util.equals(StopEventResponse, a, b);
  }
}

/**
 * @generated from message event.v1.GetEventRequest
 */
export class GetEventRequest extends Message<GetEventRequest> {
  constructor(data?: PartialMessage<GetEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "event.v1.GetEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventRequest {
    return new GetEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventRequest {
    return new GetEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventRequest {
    return new GetEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventRequest | PlainMessage<GetEventRequest> | undefined, b: GetEventRequest | PlainMessage<GetEventRequest> | undefined): boolean {
    return proto3.util.equals(GetEventRequest, a, b);
  }
}

/**
 * @generated from message event.v1.GetEventResponse
 */
export class GetEventResponse extends Message<GetEventResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string future_timestamp = 2;
   */
  futureTimestamp = "";

  constructor(data?: PartialMessage<GetEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "event.v1.GetEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "future_timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventResponse {
    return new GetEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventResponse {
    return new GetEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventResponse {
    return new GetEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventResponse | PlainMessage<GetEventResponse> | undefined, b: GetEventResponse | PlainMessage<GetEventResponse> | undefined): boolean {
    return proto3.util.equals(GetEventResponse, a, b);
  }
}

